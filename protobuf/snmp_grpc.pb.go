//
// SNMP Protobuf.
//
// A protobuf interface to SNMP functions.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: snmp.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Command_Get_FullMethodName        = "/thebinary.snmp.Command/Get"
	Command_Set_FullMethodName        = "/thebinary.snmp.Command/Set"
	Command_Walk_FullMethodName       = "/thebinary.snmp.Command/Walk"
	Command_StreamWalk_FullMethodName = "/thebinary.snmp.Command/StreamWalk"
)

// CommandClient is the client API for Command service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The SNMP command service.
type CommandClient interface {
	// SNMP Get given the list of OIDs
	Get(ctx context.Context, in *OidList, opts ...grpc.CallOption) (*SnmpPacket, error)
	// SNMP Set
	Set(ctx context.Context, in *SnmpPDUs, opts ...grpc.CallOption) (*SnmpPacket, error)
	// SNMP Walk and return all variables in one shot
	Walk(ctx context.Context, in *Oid, opts ...grpc.CallOption) (*SnmpPDUs, error)
	// Stream each SNMP PDU while running SNMP WALK from the given OID.
	StreamWalk(ctx context.Context, in *Oid, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SnmpPDU], error)
}

type commandClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandClient(cc grpc.ClientConnInterface) CommandClient {
	return &commandClient{cc}
}

func (c *commandClient) Get(ctx context.Context, in *OidList, opts ...grpc.CallOption) (*SnmpPacket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SnmpPacket)
	err := c.cc.Invoke(ctx, Command_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandClient) Set(ctx context.Context, in *SnmpPDUs, opts ...grpc.CallOption) (*SnmpPacket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SnmpPacket)
	err := c.cc.Invoke(ctx, Command_Set_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandClient) Walk(ctx context.Context, in *Oid, opts ...grpc.CallOption) (*SnmpPDUs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SnmpPDUs)
	err := c.cc.Invoke(ctx, Command_Walk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandClient) StreamWalk(ctx context.Context, in *Oid, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SnmpPDU], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Command_ServiceDesc.Streams[0], Command_StreamWalk_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Oid, SnmpPDU]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Command_StreamWalkClient = grpc.ServerStreamingClient[SnmpPDU]

// CommandServer is the server API for Command service.
// All implementations must embed UnimplementedCommandServer
// for forward compatibility.
//
// The SNMP command service.
type CommandServer interface {
	// SNMP Get given the list of OIDs
	Get(context.Context, *OidList) (*SnmpPacket, error)
	// SNMP Set
	Set(context.Context, *SnmpPDUs) (*SnmpPacket, error)
	// SNMP Walk and return all variables in one shot
	Walk(context.Context, *Oid) (*SnmpPDUs, error)
	// Stream each SNMP PDU while running SNMP WALK from the given OID.
	StreamWalk(*Oid, grpc.ServerStreamingServer[SnmpPDU]) error
	mustEmbedUnimplementedCommandServer()
}

// UnimplementedCommandServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommandServer struct{}

func (UnimplementedCommandServer) Get(context.Context, *OidList) (*SnmpPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCommandServer) Set(context.Context, *SnmpPDUs) (*SnmpPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedCommandServer) Walk(context.Context, *Oid) (*SnmpPDUs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Walk not implemented")
}
func (UnimplementedCommandServer) StreamWalk(*Oid, grpc.ServerStreamingServer[SnmpPDU]) error {
	return status.Errorf(codes.Unimplemented, "method StreamWalk not implemented")
}
func (UnimplementedCommandServer) mustEmbedUnimplementedCommandServer() {}
func (UnimplementedCommandServer) testEmbeddedByValue()                 {}

// UnsafeCommandServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandServer will
// result in compilation errors.
type UnsafeCommandServer interface {
	mustEmbedUnimplementedCommandServer()
}

func RegisterCommandServer(s grpc.ServiceRegistrar, srv CommandServer) {
	// If the following call pancis, it indicates UnimplementedCommandServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Command_ServiceDesc, srv)
}

func _Command_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OidList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Command_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).Get(ctx, req.(*OidList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Command_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnmpPDUs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Command_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).Set(ctx, req.(*SnmpPDUs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Command_Walk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Oid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).Walk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Command_Walk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).Walk(ctx, req.(*Oid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Command_StreamWalk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Oid)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommandServer).StreamWalk(m, &grpc.GenericServerStream[Oid, SnmpPDU]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Command_StreamWalkServer = grpc.ServerStreamingServer[SnmpPDU]

// Command_ServiceDesc is the grpc.ServiceDesc for Command service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Command_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thebinary.snmp.Command",
	HandlerType: (*CommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Command_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Command_Set_Handler,
		},
		{
			MethodName: "Walk",
			Handler:    _Command_Walk_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamWalk",
			Handler:       _Command_StreamWalk_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "snmp.proto",
}
